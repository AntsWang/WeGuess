/*
 * 配置路由
 */
var router = new VueRouter({
    routes: [
		{ path: '/guess/:type/:sportId/:index', name: 'guess', component: window.component.guessPage }, //竞猜
		{ path: '/leagues/:type/:sportId/:date', name: 'leagues', component: window.component.leaguesPage }, //赛事
		{ path: '/match/:matchId', name: 'match', component: window.component.match }, //详细比赛
		{ path: '/betlist', name: 'betlist', component: window.component.betlist }, //投注记录
		{ path: '/ranking', name: 'ranking', component: window.component.ranking }, //排行榜
        { path: '/rule', name: 'rule', component: window.component.rule }, //规则

       // { path: '/guess/:type/:sportId', name: 'guessx', component: window.component.guessPage }, //竞猜
		//{ path: '/leagues/:type/:sportId/:date', name: 'leaguesx', component: window.component.leaguesPage }, //赛事
		//{ path: '/match/:matchId', name: 'matchx', component: window.component.match }, //详细比赛
		//{ path: '/betlist', name: 'betlistx', component: window.component.betlist }, //投注记录
		//{ path: '/ranking', name: 'rankingx', component: window.component.ranking } //排行榜
    ]
});
var resourece = new VueResource();
Vue.http.options.emulateJSON = true;


//事件bus 用于非层级关系组件间通信
window.vbus = new Vue();

/*
 * 初始化项目
 */
var wgapp = new Vue({
    el: "#sport",
    router: router,
    created: function () {
        this.routeUpdate();
        vbus.$on("SetTitle", this.SetTitle);
    },
    methods: {
        routeUpdate: function () {
            //解析请求地址,分发显示地址
            var arr = window.location.hash.replace("/tab/guess", "").split("/");
            if (arr instanceof Array && arr.length >= 2 && arr[1]) {
                switch (arr[1]) {
                    case "guess":
                        var gsportId = 1; //默认初始化运动为足球
                        var gtype = "time";
                        var gindex = 0;
                        if (arr.length >= 3 && arr[2]) {
                            gtype = arr[2];
                        }
                        if (arr.length >= 4 && arr[3]) {
                            gsportId = arr[3];
                        }
                        if (arr.length >= 5 && arr[4]) {
                            gindex = arr[4];
                        }
                        this.$router.push({ name: arr[1], params: { type: gtype, sportId: gsportId, index: gindex } });
                        break;
                    case "leagues":
                        var lsportId = 1; //默认初始化运动为足球
                        var ltype = "live";
                        var ldate = new Date().format("YY-MM-dd");
                        if (arr.length >= 3 && arr[2]) {
                            ltype = arr[2];
                            if (ltype == "result") {
                                ldate = new Date().format("YY-MM-dd");
                            } else if (ltype == "process") {
                                ldate = new Date().format("YY-MM-dd");
                            } else {
                                ltype = "live";
                            }

                        }
                        if (arr.length >= 4 && arr[3]) {
                            lsportId = arr[3];
                        }
                        if (arr.length >= 5 && arr[4]) {
                            ldate = arr[4] || ldate;
                        }
                        this.$router.push({ name: arr[1], params: { type: ltype, sportId: lsportId, date: ldate } });
                        break;
                    case "match":
                        if (arr.length < 3) {
                            this.$router.push({ name: "guess", params: { type: "time", sportId: 1, index: 0 } });
                        } else {
                            this.$router.push({ name: arr[1], params: { matchId: arr[2] } });
                        }
                        break;
                    case "betlist":
                    case "ranking":
                    case "rule":
                        this.$router.push({ name: arr[1] });
                        break;
                }
            } else {
                this.$router.push({ name: "guess", params: { type: "time", sportId: 1, index: 0 } });
            }
        },
        SetTitle: function (title) {
            document.title = title;
        }
    },
    watch: {
        '$route': function (to, from) {
            // 对路由变化作出响应...
            //if (!to.params.date) {
            this.routeUpdate();
            //}
        }
    }
});
try {
    var olog = console.log;
    var nlog = function (type) {
        return function () {
            var p = document.createElement("p");
            var node = document.createTextNode("[" + type + "] " + Array.prototype.join.apply(arguments, [" "]));
            p.appendChild(node);
            var x = document.getElementById("debug_c");
            if (x) {
                x.appendChild(p);
            }
            olog("[" + type + "]", arguments);
        }

    }
    console.debug = nlog("D");
    console.info = nlog("I");
    console.log = nlog("L");
    console.error = nlog("E");
    console.warn = nlog("W");
} catch (e) {

}
